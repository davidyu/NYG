Design Log
==========

Design Log for the Adobe Game Jam NY 2013. Theme: New York.

Options
-------

MTA/Subway Sim
    like Railroad Tycoon except you control when trains shut down, whether to
    fix them, etc

MTA/Subway Quest
    travel around the city and run errands while using the MTA. Difficult because
    we need so much art. And think about whether or not you want to do collision
    detection! So much work if we do this. Definitely make this simpler.

NY Life Sim
    you're a white collar worker trying to get through life in the city that never
    sleeps. You are invited to a series of events (cultural, relaxing, work-related)
    and you choose how to spend your time.

Ticket Officer
    you're a police officer giving tickets to the good citizens of New York. The
    longer you wait, the more money you get. The more likely they are to get away.


Final verdict: Ticketing Officer, because it's simple (good for the 24h time
constraint) and fun (very accessible).

Pivot: You're a policeman trying to catch a perp who escapes via the subway, among other things.

Name log
--------

Manhattan Chase



Implementation
--------------

- thinking of using GMaps wrapper for Google Maps.
    - necessarily means we're using the CreateJS framework and working on HTML5.
    - (because Google Maps API for Flash is deprecated)
- start by getting GMaps API Key
    - up to 25,000 accesses per day. Limit this to server (Node) accesses.
    - 24 * 60 * 60 seconds per day. 0.2 accesses per second or one access every
      five seconds
    - Node needs to access traffic data and call map routing and get subway info (?)
- forget about a server and do everything client-sided. Extend to server later.
- write walk and subway objects to do those functions. Those are the most important.

Internal design (don't pay too much attention)
- how to write avoidance and chase component?
    - 

Bits and pieces of game logic that must work (pay a lot of attention here)
- Get markers and get them moving on screen.
    - get some Google routing API calls and cache them locally for testing when there isn't an Internet connection.
- Download and understand NY subway system times. CSV reader for JavaScript.
- Simulate subway entites.
  - Simulate only those that are "live" right now.
- Design and implement simple AI to avoid and follow other people.
- Implement variable-time system with step MULTIPLIER/FACTOR
- Finish simulating subway entites on train and work on simulating taxis

Notes
-----

- Decouple rendering from updating so 2 hrs on train can be productive.
- 

Postmortem
----------

- I need to learn basic DB concepts. Without my good friend Ben the coolest part of this prototype would never have happened.